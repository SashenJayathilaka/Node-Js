"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
/**
 * @param {string} collectionName
 * @param {string} dbUrl
 * @param {string} where
 * @param {string} data
 * @param {any} update
 * @param {any} options
 */
class DataLake {
    constructor(collectionName, dbUrl) {
        this.dbName = "Base-Mongo";
        this.collectionName = collectionName;
        this.dbUrl = dbUrl;
    }
    get(where) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connect();
            return this.collection.findOne(where);
        });
    }
    create(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connect();
            return this.collection.insertOne(data);
        });
    }
    update(where, update, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connect();
            return this.collection.updateOne(where, update, options);
        });
    }
    delete(where) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connect();
            return this.collection.deleteOne(where);
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = new mongodb_1.MongoClient(this.dbUrl, {
                // @ts-ignore
                useNewUrlParser: true,
                useUnifiedTopology: true,
            });
            yield client.connect();
            this.db = client.db(this.dbName);
            this.collection = this.db.collection(this.collectionName);
        });
    }
}
exports.default = DataLake;
